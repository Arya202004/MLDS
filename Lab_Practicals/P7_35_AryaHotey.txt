10/21/24, 1:08 PM P7_35_AryaHotey.ipynb - Colab

K-Means Clustering

# Import necessary libraries

import numpy as np

import pandas as pd

import matplotlib.pyplot as plt

from sklearn.cluster import KMeans
from sklearn.datasets import make_blobs

df = pd.read_csv("/content/titanic_cleaned.csv")

bad
I

df.drop('Survived' ,axis=1)
= df['Survived']

‘<
i}

plt.scatter(X.iloc[:, @], X.iloc[:, 1], s=5@)
plt.show()

2.07 @ e e

184

1.675

144

1.24

107 @ @ &

T T T T
1.00 125 1.50 L750 2.00 2.25 2.50 2.75 3.00

# Apply K-Means clustering
kmeans = KMeans(n_clusters=3)
kmeans. Fit(X)

’ KMeans i ?

KMeans(n_clusters=3)

# Get the cluster centers and labels
centroids = kmeans.cluster_centers_
labels = kmeans.labels_

# Visualize the clusters
plt.scatter(X.iloc[:, @], X.iloc[:, 1], c=labels, s=5@, cmap='viridis')

https://colab.research.google.com/drive/1Nn7wLRWa8s80rU8JASNimsHJvjfarfL_#scrollTo=5HQgd-RQPhoA&printMode=true
10/21/24, 1:08 PM P7_35_AryaHotey.ipynb - Colab

<matplotlib.collections.PathCollection at @x7cafaeb2e8fe>

2.07 8 e 6

L684

1674

L474

Le

107 @ e 6

1.00 125 1.50 L750 2.00 2.25 2.50 2.75 3.00

plt.scatter(centroids[:, @], centroids[:, 1], c='red', s=200, alpha=@.75)
plt.show()

1.42 4
1.40 +
1.38 4
1.364

1.34 4
@ @

1.8 19 2.0 2.1 2.2 2.3 2.4 2.5 2.6

# Elbow method to determine the optimal number of clusters
inertia = []
K = range(1, 10)
for k in K:
kmeans = KMeans(n_clusters=k)
kmeans . fit (X)

| inertia.append(kmeans.inertia_)

# Plot the elbow curve

plt.plot(K, inertia, 'bx-')
plt.xlabel('Number of clusters‘)
plt.ylabel('Inertia')

plt.title('Elbow Method For Optimal k')
plt.show()

https://colab.research.google.com/drive/1Nn7wLRWa8s80rU8JASNimsHJvjfarfL_#scrollTo=5HQgd-RQPhoA&printMode=true
10/21/24, 1:08 PM P7_35_AryaHotey.ipynb - Colab

Elbow Method For Optimal k

140000 4

120000 4

100000 5

80000 +

Inertia

60000 -

40000 4

20000 4

https://colab.research.google.com/drive/1Nn7wLRWa8s80rU8JASNimsHJvjfarfL_#scrollTo=5HQgd-RQPhoA&printMode=true

3/3
